//
// gvsong - Builds and renders songs designed for Game Boy Advance
// by Sean Connelly (@velipso), https://sean.cm
// Project Home: https://github.com/velipso/gvsong
// SPDX-License-Identifier: 0BSD
//

.import './config.gvasm' { IW, maxSfxCount, sfx_st }

//
// Sample requirements:
//   Bit depth: 8
//   Sample rate: 32768 hz
//   Byte length: Must be a multiple of 608  **IMPORTANT**
//
// Priority:
//   If all sound effect slots are taken, then a new sound effect will
//   stomp any existing effect of equal or higher priority value.
//
//   For example, if something is playing at priority 2, a new sound
//   at priority 3 cannot stomp it.  But it will stomp existing sounds
//   at priority 3 or higher.
//

.begin sndPlaySfx //(sampleBasePointer, byteLength, priority)
  .thumb
  push  {r4-r6}

  // first, look for an empty slot
  ldr   r3, =IW.sfx
  .script
    var maxSfxCount = lookup maxSfxCount
    for var i: range maxSfxCount
      put "ldrx  r4, [r3, #sfx_st.basePointer]"
      put "cmp   r4, #0"
      put "beq   placeSfxHere"
      if i < maxSfxCount - 1
        put "adds  r3, #sfx_st._bytes"
      end
    end
  .end

  // oh no, nothing empty... so find the slot with the highest
  // priority value to potentially stomp
  .script
    var maxSfxCount = lookup maxSfxCount
    for var i: range maxSfxCount
      if i == 0
        // just load the first entry as the best choice
        // r3 = best SFX pointer
        // r4 = best priority
        put "ldr   r3, =IW.sfx"
        put "ldrx  r4, [r3, #sfx_st.priority]"
        if i < maxSfxCount - 1
          put "movs  r5, r3"
          put "adds  r5, #sfx_st._bytes"
        end
      else
        // see if the next slot is better than the best so far
        put "ldrx  r6, [r5, #sfx_st.priority]"
        put "cmp   r6, r4"
        put "blt   +"
        // it is better! so save it to r3/r4
        put "movs  r3, r5"
        put "movs  r4, r6"
        put "+"
        if i < maxSfxCount - 1
          put "adds  r5, #sfx_st._bytes"
        end
      end
    end
  .end
  // see if the current sfx should stomp the best slot
  cmp   r4, r2
  bge   placeSfxHere

  // can't find anything :-(
  pop   {r4-r6}
  bx    lr

placeSfxHere:
  strx  r0, [r3, #sfx_st.basePointer]
  strx  r1, [r3, #sfx_st.length]
  strx  r2, [r3, #sfx_st.priority]
  movs  r0, #0
  strx  r0, [r3, #sfx_st.currentPos]
  pop   {r4-r6}
  bx    lr
  .pool
.end
