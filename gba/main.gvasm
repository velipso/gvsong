//
// gvsong - Builds and renders songs designed for Game Boy Advance
// by Sean Connelly (@velipso), https://sean.fun
// Project Home: https://github.com/velipso/gvsong
// SPDX-License-Identifier: 0BSD
//

.stdlib
.import './src/config.gvasm' { IW, song_st, bufferSize }
.import './src/sndLib.gvasm' { sndInit, sndLoadSong, sndPlaySfx }
.import './src/sndFrame.gvasm' { sndFrame }
.import './gvirq/irqInit.gvasm' { irqInit }
.import './gvirq/config.gvasm' { IRQHandler }

.begin INP
  .def MASK_D = 0x080
  .def MASK_U = 0x040
  .def MASK_L = 0x020
  .def MASK_R = 0x010
  .def MASK_S = 0x008
  .def MASK_E = 0x004
.end

.struct G = IW.end
  .i8 volumeStr[8]
  .i8 sequenceStr[8]
  .align 4
end:
.end

// GBA header
.begin
  .arm
  b main
  .logo
  .title "GVSONG"
  .str "CUNE77"
  .i16 150, 0, 0, 0, 0
  .i8 0 // version
  .crc
  .i16 0
.end

.pool
.align 4
.begin iwramStart
  .def base = 0x03002000
  .base base
  .arm
  .include './src/sndFrame.gvasm'
  .include './gvirq/irqHandler.gvasm'
  .pool
  .align 4
.end
iwramEnd:

// main program
.align 4
.begin main
  .arm
  add   ip, pc, #1
  bx    ip
  .thumb

  // disable lcd
  ldr   r0, =REG_DISPCNT
  ldr   r1, =0b0000_0000_1000_0000
  strh  r1, [r0]

  // set cartridge wait state for faster access
  ldr   r0, =REG_WAITCNT
  ldr   r1, =0x4317
  strh  r1, [r0]

  // zero memory
  ldr   r0, =0x02000000
  movs  r1, #0
  ldr   r2, =256 * 1024
  bl    memset32
  ldr   r0, =0x03000000
  movs  r1, #0
  ldr   r2, =32 * 1024
  bl    memset32

  // copy over IWRAM functions
  ldr   r0, =iwramStart.base
  ldr   r1, =iwramStart
  ldr   r2, =iwramEnd - iwramStart
  bl    memcpy32

  // initialize IRQ handler
  bl    irqInit

  // initialize sound
  ldr   r0, =IRQHandler.timer1
  ldr   r1, =sndInit
  bl    bx_r1

  // enable vblank
  ldr   r1, =REG_IME
  mov   r2, #0
  strb  r2, [r1]
  ldr   r0, =REG_DISPSTAT
  movs  r1, #8
  strh  r1, [r0]
  ldr   r0, =REG_IE
  ldrh  r1, [r0]
  movs  r2, #1
  orrs  r1, r2
  strh  r1, [r0]
  ldr   r1, =REG_IME
  mov   r2, #1
  strb  r2, [r1]

  // load sequence 0
  ldr   r0, =songBasePointerEOF
  movs  r1, #0
  bl    sndLoadSong

  // initialize volume
  movs  r1, #16
  ldr   r0, =IW.masterVolume
  strx  r1, [r0] (IW.masterVolume)
  ldr   r0, =IW.musicVolume
  strx  r1, [r0] (IW.musicVolume)
  ldr   r0, =IW.sfxVolume
  strx  r1, [r0] (IW.sfxVolume)

  // setup bg0
  ldr   r0, =REG_BG0CNT
  ldr   r1, =0xc883
  strh  r1, [r0]

  // set palette
  ldr   r0, =0x05000000
  movs  r1, #0
  strh  r1, [r0]
  adds  r0, #2
  strh  r1, [r0]
  adds  r0, #2
  ldr   r1, =rgb(31, 31, 31)
  strh  r1, [r0]
  adds  r0, #2
  ldr   r1, =rgb(4, 20, 10)
  strh  r1, [r0]

  // copy over tiles
  ldr   r0, =0x06000000
  ldr   r1, =tileData
  ldr   r2, =32 * 3 * 8 * 8 * 2
  bl    memcpy32

  // print messages
  ldr   r0, =0
  ldr   r1, =2
  ldr   r2, =songMessages
  ldr   r3, =0
  bl    printString
  ldr   r0, =0
  ldr   r1, =4
  ldr   r2, =songMessages+32
  ldr   r3, =0
  bl    printString
  ldr   r0, =0
  ldr   r1, =6
  ldr   r2, =songMessages+64
  ldr   r3, =0
  bl    printString
  ldr   r0, =6
  ldr   r1, =9
  ldr   r2, =volumeStr
  ldr   r3, =96
  bl    printString
  ldr   r0, =6
  ldr   r1, =11
  ldr   r2, =sequenceStr
  ldr   r3, =96
  bl    printString
  ldr   r0, =3
  ldr   r1, =16
  ldr   r2, =madeWith
  ldr   r3, =96
  bl    printString
  ldr   r0, =2
  ldr   r1, =18
  ldr   r2, =url
  ldr   r3, =96
  bl    printString

  // enable bg0
  ldr   r0, =REG_DISPCNT
  ldr   r1, =0x0100
  strh  r1, [r0]

  movs  r4, #0
  movs  r5, #0

  .begin nextFrame
    swi   5

    // print volume
    ldr   r0, =G.volumeStr
    movs  r1, #60
    strb  r1, [r0, #0]
    movs  r1, #32
    strb  r1, [r0, #1]
    strb  r1, [r0, #4]
    movs  r1, #62
    strb  r1, [r0, #5]
    movs  r1, #0
    strb  r1, [r0, #6]
    strb  r1, [r0, #7]
    adds  r0, #2
    ldr   r1, =IW.musicVolume
    ldrx  r1, [r1] (IW.musicVolume)
    bl    printByte

    ldr   r0, =16
    ldr   r1, =9
    ldr   r2, =G.volumeStr
    movs  r3, #0
    cmp   r4, #0
    beq   +
    ldr   r3, =96
+   bl    printString

    // print sequence
    ldr   r0, =G.sequenceStr
    movs  r1, #60
    strb  r1, [r0, #0]
    movs  r1, #32
    strb  r1, [r0, #1]
    strb  r1, [r0, #4]
    movs  r1, #62
    strb  r1, [r0, #5]
    movs  r1, #0
    strb  r1, [r0, #6]
    strb  r1, [r0, #7]
    adds  r0, #2
    ldr   r1, =IW.synth.sequence
    ldrx  r1, [r1] (IW.synth.sequence)
    bl    printByte

    ldr   r0, =16
    ldr   r1, =11
    ldr   r2, =G.sequenceStr
    movs  r3, #0
    cmp   r4, #1
    beq   +
    ldr   r3, =96
+   bl    printString

    // advance sound
    ldr   r1, =sndFrame
    bl    bx_r1

    // read input
    ldr   r0, =REG_KEYINPUT
    ldrh  r0, [r0]
    ldr   r1, =0x3ff
    eors  r0, r1
    // r0 = this input
    // r5 = last input
    // r0 ^ r5 = buttons that have toggled
    // r0 & (r0 ^ r5) = buttons that have been hit
    movs  r1, r5
    eors  r1, r0
    ands  r1, r0
    movs  r5, r0

    movs  r0, #INP.MASK_U
    ands  r0, r1
    bne   hitUp
    movs  r0, #INP.MASK_D
    ands  r0, r1
    bne   hitDown
    movs  r0, #INP.MASK_L
    ands  r0, r1
    bne   hitLeft
    movs  r0, #INP.MASK_R
    ands  r0, r1
    bne   hitRight
    movs  r0, #INP.MASK_S
    ands  r0, r1
    bne   hitStart
    movs  r0, #INP.MASK_E
    ands  r0, r1
    bne   hitSelect
    b     nextFrame
hitUp:
    movs  r4, #0
    b     nextFrame
hitDown:
    movs  r4, #1
    b     nextFrame
hitLeft:
    cmp   r4, #0
    beq   volumeDown
    // sequence down
    ldr   r1, =IW.synth.sequence
    ldrx  r1, [r1] (IW.synth.sequence)
    cmp   r1, #0
    ble   nextFrame
    ldr   r0, =IW.synth.songBasePointer
    ldrx  r0, [r0] (IW.synth.songBasePointer)
    subs  r1, #1
    bl    sndLoadSong
    b     nextFrame
volumeDown:
    ldr   r0, =IW.musicVolume
    ldrx  r1, [r0] (IW.musicVolume)
    cmp   r1, #0
    ble   nextFrame
    subs  r1, #1
    strx  r1, [r0] (IW.musicVolume)
    b     nextFrame
hitRight:
    cmp   r4, #0
    beq   volumeUp
    // sequence up
    ldr   r0, =IW.synth.songBasePointer
    ldrx  r0, [r0] (IW.synth.songBasePointer)
    ldr   r1, =IW.synth.sequence
    ldrx  r1, [r1] (IW.synth.sequence)
    ldrx  r2, [r0, #song_st.seqsLength]
    subs  r2, #1
    cmp   r1, r2
    bge   nextFrame
    adds  r1, #1
    bl    sndLoadSong
    b     nextFrame
volumeUp:
    ldr   r0, =IW.musicVolume
    ldrx  r1, [r0] (IW.musicVolume)
    cmp   r1, #16
    bge   nextFrame
    adds  r1, #1
    strx  r1, [r0] (IW.musicVolume)
    b     nextFrame
hitStart:
    // restart sequence
    ldr   r0, =IW.synth.songBasePointer
    ldrx  r0, [r0] (IW.synth.songBasePointer)
    ldr   r1, =IW.synth.sequence
    ldrx  r1, [r1] (IW.synth.sequence)
    bl    sndLoadSong
    b     nextFrame
hitSelect:
    ldr   r0, =sfxRaw
    ldr   r1, =sfxRawEnd - sfxRaw
    movs  r2, #0
    bl    sndPlaySfx
    b     nextFrame
  .end
  .pool
.end

.begin bx_r1
  .thumb
  bx    r1
.end

.begin printByte //(output, byte)
  .thumb
  lsls  r2, r1, #24
  lsrs  r2, #28
  cmp   r2, #10
  blt   +
  adds  r2, #55
  b     ++
+ adds  r2, #48
++
  strb  r2, [r0]
  adds  r0, #1
  lsls  r2, r1, #28
  lsrs  r2, #28
  cmp   r2, #10
  blt   +
  adds  r2, #55
  b     ++
+ adds  r2, #48
++
  strb  r2, [r0]
  bx    lr
.end

.begin printString //(x, y, ptr, color)
  .thumb
  lsls  r0, #1
  lsls  r1, #6
  adds  r0, r1
  movs  r1, r3
  ldr   r3, =0x06004000
  adds  r3, r0
nextChar:
  ldrb  r0, [r2]
  cmp   r0, #0
  beq   return
  subs  r0, #32
  adds  r0, r1
  strh  r0, [r3]
  adds  r2, #1
  adds  r3, #2
  b     nextChar
return:
  bx    lr
  .pool
.end

volumeStr:
.str "  volume: <    >\0"
sequenceStr:
.str "sequence: <    >\0"
madeWith:
.str "made with gvsong v"
.script
  var version = pickle.val embed '../version.json'
  u8 str.list list.join version, '.'
.end
.u8  0
url:
.str "github.com/velipso/gvsong\0"

.align 4
tileData:
.script
  var img = image.load embed './font.png'
  var d1 = {}
  var d2 = {}
  for var ty: range 3
    for var tx: range 32
      for var y: range 8
        for var x: range 8
          var c = image.rgb img, tx * 8 + x, ty * 8 + y
          list.push d1, pick c == 0, 0, 2
          list.push d2, pick c == 0, 0, 3
        end
      end
    end
  end
  u8 d1
  u8 d2
.end

.align 4
.include './src/sndLib.gvasm'
.include './gvirq/irqInit.gvasm'

.begin memcpy32 //(dest, source, byte count)
  .thumb
  .align 4, nop
  bx    pc // change to ARM mode
  nop
arm:
  .arm
  subs  r2, #32
  blt   last32
  stmfd sp!, {r3-r10}
chunk:
  ldmia r1!, {r3-r10}
  stmia r0!, {r3-r10}
  subs  r2, #32
  blt   done32
  ldmia r1!, {r3-r10}
  stmia r0!, {r3-r10}
  subs  r2, #32
  blt   done32
  ldmia r1!, {r3-r10}
  stmia r0!, {r3-r10}
  subs  r2, #32
  blt   done32
  ldmia r1!, {r3-r10}
  stmia r0!, {r3-r10}
  subs  r2, #32
  bge   chunk
done32:
  ldmfd sp!, {r3-r10}
last32:
  adds  r2, #32
  bxle  lr
last4:
  subs  r2, #4
  ldrge r12, [r1], #4
  strge r12, [r0], #4
  bgt   last4
  bxeq  lr
  add   r2, #4
bytecopy:
  ldrb  r12, [r1], #1
  ldrb  r12, [r0], #1
  subs  r2, #1
  bgt   bytecopy
  bx    lr
  .pool
.end

.begin memset32 //(dest, data, byte count)
  .thumb
  .align 4, nop
  bx    pc // change to ARM mode
  nop
arm:
  .arm
  subs  r2, #32
  blt   last32
  stmfd sp!, {r3-r9}
  mov   r3, r1
  mov   r4, r1
  mov   r5, r1
  mov   r6, r1
  mov   r7, r1
  mov   r8, r1
  mov   r9, r1
chunk:
  stmia r0!, {r1, r3-r9}
  subs  r2, #32
  blt   done32
  stmia r0!, {r1, r3-r9}
  subs  r2, #32
  blt   done32
  stmia r0!, {r1, r3-r9}
  subs  r2, #32
  blt   done32
  stmia r0!, {r1, r3-r9}
  subs  r2, #32
  bge   chunk
done32:
  ldmfd sp!, {r3-r9}
last32:
  adds  r2, #32
  bxle  lr
last4:
  str   r1, [r0], #4
  subs  r2, #4
  bgt   last4
  bx    lr
.end

.align bufferSize
sfxRaw:
.embed './sfx.raw'
.align bufferSize
sfxRawEnd:

.align 1024
songMessages:
// three song messages will be concatenated first, with 32 chars each
.def songBasePointerEOF = songMessages + 32*3
// then the song itself
